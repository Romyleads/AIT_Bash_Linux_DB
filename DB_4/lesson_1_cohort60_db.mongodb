// Переключаемся на базу cohort60_db
use('cohort60_db');

// Вставляем документ
// db.users.insertOne({
//   name: 'Romy'
// })
// db.users.insertMany([
// { name: 'Mike', age: 20 },
//  { name: 'Dave',age:18 }, 
// { name: 'Mary',age: 19}, 
// { name: 'Kianu', age: 21 }
// ])
// db.users.find({ name: 'Romy' }).pretty()
//db.users.find({ name: 'Romy' }).sort({ name: 1 }).pretty()  
// Вывод всех пользователей
//db.users.find().pretty()
// В обратном порядке
//db.users.find().sort({ name: -1 }).pretty()
//db.users.find().limit(3).pretty(); // limit(3) - выводит первые 3 элемента

//db.users.find().sort({name:1}).pretty(); // сортировка по возрасту
//db.users.find().sort({ name: -1, age: 1 }).pretty(); // сортировка по имени в обратном порядке

// db.users.find().limit(5); // limit(5) - выводит первые 5 элементов
// db.users.find().skip(2); // skip(2) - пропускает первые 2 элемента
// db.users.find().skip(2).limit(3); // skip(2) - пропускает первые 2 элемента и выводит следующие 3 элемента
//db.users.find().skip(2).limit(3).sort({ age: 1 }).pretty(); // skip(2) - пропускает первые 2 элемента и выводит следующие 3 элемента и сортирует по возрасту 

//db.users.find({age:18}); // выводит всех пользователей с возрастом 18
// db.users.insertOne({
// 	name: 'WillX',
// 	age: 18,
// hobbys: [
// 	"Football",
// 	"Swimming",
// 	"Running",
// 	"Reading",
// 	"Writing",
// 	"Photography",
// 	"Traveling",
// 	"Cooking",
// 	"Painting",
// 	"Yoga",
// 	"Writing"
// 	]
// });
// Удалим дубликаты имен пользователей
// db.users.aggregate([
//   {
//     $group: {
//       _id: "$name", // Группируем по имени
//       doc: { $first: "$$ROOT" } // Берём первый документ
//     }
//   },
//   {
//     $replaceRoot: { newRoot: "$doc" } // Вытаскиваем документ обратно
//   },
//   {
//     $out: "users" // Перезаписываем коллекцию
//   }
// ])


// Операторы

// db.users.find({ 
// age: { $gt: 20 } 
// }); // Выводит пользователей старше 20 лет

// // Выводит пользователей старше 20 лет
// db.users.find({ 
// age: { $gte: 20 } 
// }); // Выводит пользователей старше или равных 20 лет

// // Выводит пользователей младше 20 лет
// db.users.find({ 
// age: { $lt: 20 } 
// }); // Выводит пользователей младше 20 лет

// db.users.find({ 
// age: { $lte: 20 } 
// }); // Выводит пользователей младше или равных 20 

// db.users.find({ 
// age: { $ne: 20 } 
// }); // Выводит пользователей не равных 20 лет

// db.users.find({ 
// age: { $exists: true } 
// }); // Выводит пользователей с возрастом

// db.users.find({ 
// age: { $exists: false } 
// }); // Выводит пользователей без возрастов

// db.users.find({ 
// name: { $regex: /^M/ } 
// }); // Выводит пользователей с именами начинающимися на M

// db.users.find({
// name:{$eq:'Will'}
// }) // Выводит пользователей с именами равными Will

// db.users.find({
// name:{$ne:'Will'}
// }) // Выводит пользователей с именами не равными Will

// db.users.find({
// name:{$in:['Mike','Dave']}    
// }) // Выводит пользователей с именами равными Mike или Dave

// db.users.find({age: 18},{name:1, _id:0}) // Выводит пользователей с возрастом равным 18 и только имя и не выводит _id

// {name: 1}: Это второй аргумент метода find,
// который представляет собой проекцию (projection).
// Проекция определяет, какие поля должны быть включены в результат.
// В данном случае {name: 1} означает,
// что в результате запроса будут включены только поле name.
// Поле _id будет включено по умолчанию, если не указано другое.

// Оператор $in -Входит в
// выведем всех с именами

//db.users.find({name:{$in: ["Romy", "Will"]}})

// Оператор $nin - not in - не входит в "черный лист"

// все у кого имя не джон и не анн
//db.users.find({name:{$nin: ["John", "Romy"]}},{ _id:0}) // -- и не выводит _id


// Логическое и $and
// найдем человека с возрастом 34 и именем != анна
// db.users.find({$and: [{age:32}, {name: {$ne: "Dude"}}]})